from torchvision import transforms
import torch
from utilities import Sobel, TwoViews
from SimCLR_model import SimCLR
device = ("cuda:0" if torch.cuda.is_available else "cpu")

transform_train = transforms.Compose([
    transforms.RandomApply([transforms.ColorJitter(0.8, 0.8, 0.8, hue=0)], p=0.5), # 以50%的概率colorJitter一张图像
    transforms.RandomApply([transforms.GaussianBlur(kernel_size=3)], p=0.5), # 以50的概率Sobel滤波一张图像(提取边缘)
    # transforms.RandomApply([Sobel()], p=0.5), # 以50的概率Sobel滤波一张图像(提取边缘)
    transforms.ToTensor(),
])

# train_dataset = TwoViewMNIST(root="./dataset", train=True, transform=transform_train, download=True)
from torchvision.datasets import MNIST# CIFAR10
train_dataset = MNIST(root="./dataset", train=True, transform=TwoViews(transform_train,2), download=True)
Ntr = 6000
torch.manual_seed(0)
chosen_tr = torch.randperm(train_dataset.data.size(dim=0))[:Ntr]

train_dataset.data = train_dataset.data[chosen_tr,:,:] # [Ntr, 28, 28] float32  /255  why加上255就解压trainloader时乱码？？？
train_dataset.targets = train_dataset.targets[chosen_tr]
train_dataset.targets.requires_grad = False
trainloader = torch.utils.data.DataLoader(train_dataset,batch_size=300, shuffle=False)

simclr = SimCLR(tau=0.1, out_feas=128, gray=True, device=device)
# pre_trained_dir = "./models/simclr_unsup_tau0.1_Adam_lr0.0003_decay0.0002_Ntr6000_eph10.pth"
# simclr.load_state_dict(torch.load(pre_trained_dir,map_location=device))
simclr.fit(trainloader, max_epoch=200,lr=3e-4,start_epoch=0) # int(pre_trained_dir[-6:-4])


class SimCLR(nn.Module):
    def __init__(self, out_feas=128, tau=0.1, gray=False, device="cuda:0"):
        super(self.__class__, self).__init__()

        # ResNet18  最后一层是.fc: Linear(512,1000, bias=True)
        # self.backbone = ResNet_bkbone(block=BasicBlock, layers=[2,2,2,2],grayscale=True).to(device)
        self.backbone = models.resnet50(pretrained=False).to(device)
        if gray: self.backbone.conv1 = torch.nn.Conv2d(1,64,kernel_size=7,stride=2, padding=3, bias=False).to(device)

        # 替换resnet18最后的全连接层
        mlp_in_feas = self.backbone.fc.in_features # resnet18的bkbong输出  resnet50是2048
        self.backbone.fc = nn.Sequential(nn.Linear(mlp_in_feas, mlp_in_feas,bias=False),
                                        nn.ReLU(),
                                        nn.Linear(mlp_in_feas, out_feas)).to(device)

        self.loss_fn = nn.CrossEntropyLoss().to(device)
        self.views = 2
        self.tau = tau

    def forward(self, X): # X:[B,1,28,28](MNIST)
        z = self.backbone(X) # h:[B,512]
        # z = self.mlp(h) # z:[B,out_feas]
        return z

    def infoNCE(self, features): # features:[2bs,d]
        device = features.device
        bs = features.size(dim=0)//2

        labels = torch.cat([torch.arange(bs) for i in range(self.views)], dim=0) # [2bs]
        labels = (labels.unsqueeze(0) == labels.unsqueeze(1)).float() # [2*bs,2*bs]
        labels = labels.to(device)

        features = torch.nn.functional.normalize(features, dim=1) # 归一化后, torch.sum(features*features, dim=1) = 全1
        sim = torch.matmul(features, features.T) # [2*bs,2*bs] [i,j]: (xi.T * xj)/(||xi||2 * ||xj||2)

        mask = torch.eye(labels.shape[0], dtype=torch.bool).to(device) # [2bs,2bs] bool单位阵
        labels = labels[~mask].view(labels.shape[0], -1) # [2bs, 2bs-1] 等价于: labels挖去对角线元素, 右上角矩阵向左移1格
        sim = sim[~mask].view(sim.shape[0], -1) # [2bs, 2bs-1]

        # select and combine multiple positives
        positives = sim[labels.bool()].view(labels.shape[0], -1) # [2bs,1]
        negatives = sim[~labels.bool()].view(sim.shape[0], -1) # [2bs,2bs-2]
        logits = torch.cat([positives, negatives], dim=1) # [2bs,2bs-1] 把simi_mat中labels==True的位置(共2bs个)移到第一列
        logits = logits / self.tau

        targets = torch.zeros(logits.shape[0], dtype=torch.long).to(device) # [2bs]
        return logits, targets # labels全0

    def fit(self, trainloader, lr=1e-3, momentum=0.9, weight_decay=2e-4, max_epoch=500,start_epoch=0, device="cuda:0"):
        print("...Training...")
        print("lr={:e}  mom={:.2f}  wei_decay={:e}  epoches={:d}  bs={:d}"\
              .format(lr,momentum,weight_decay,max_epoch,trainloader.batch_size))
        # optimizer = LARS(self.parameters(), lr,momentum,weight_decay,eta,max_epoch)
        optimizer = torch.optim.Adam(self.parameters(), lr=lr,weight_decay=weight_decay) # ,momentum=momentum
        for epoch in range(1+start_epoch,max_epoch+1):
            self.train()
            Tr_loss = 0
            for X,_ in trainloader:
                X = torch.cat(X, dim=0).to(device) # list:[[bs,C,H,W],[bs,C,H,W]] -> Tensor:[2bs,C,H,W]
            # for (imgL,imgR,labels) in trainloader:
            #     X = torch.cat((imgL, imgR), dim=0).to(device)
                z = self.forward(X) # [2bs,d]
                logits,targets = self.infoNCE(z) #logits:[2bs,2bs-1]  targets:[2bs]
                loss = self.loss_fn(logits, targets)
                Tr_loss += loss.item()
                optimizer.zero_grad()
                loss.backward()
                optimizer.step()
            print("epoch {:3d}  InfoNCE Loss={:e}".format(epoch, Tr_loss))

            if (epoch) % 10==0:
                torch.save(self.state_dict(), "./models/simclr_unsup_tau"+str(self.tau)+"_"+str(optimizer.__class__)[-6:-2]+"_lr"+str(lr)\
                        +"_decay"+str(weight_decay)+"_Ntr"+str(trainloader.dataset.data.size(0))+"_eph"+str(epoch)+".pth")
        torch.save(self.state_dict(), "./models/simclr_unsup_tau"+str(self.tau)+"_"+str(optimizer.__class__)[-6:-2]+"_lr"+str(lr)\
                +"_decay"+str(weight_decay)+"_Ntr"+str(trainloader.dataset.data.size(0))+"_eph"+str(epoch)+".pth")


lr=3.000000e-04  mom=0.90  wei_decay=2.000000e-04  epoches=200  bs=300
epoch   1  InfoNCE Loss=1.185416e+02
epoch   2  InfoNCE Loss=1.064912e+02
epoch   3  InfoNCE Loss=8.437183e+01
epoch   4  InfoNCE Loss=6.617341e+01
epoch   5  InfoNCE Loss=5.393720e+01
epoch   6  InfoNCE Loss=4.413224e+01
epoch   7  InfoNCE Loss=3.677764e+01
epoch   8  InfoNCE Loss=3.101272e+01
epoch   9  InfoNCE Loss=2.657445e+01
epoch  10  InfoNCE Loss=2.260936e+01
epoch  11  InfoNCE Loss=1.941503e+01
epoch  12  InfoNCE Loss=1.663627e+01
epoch  13  InfoNCE Loss=1.485909e+01
epoch  14  InfoNCE Loss=1.310902e+01
epoch  15  InfoNCE Loss=1.152835e+01
epoch  16  InfoNCE Loss=1.030909e+01
epoch  17  InfoNCE Loss=9.273405e+00
epoch  18  InfoNCE Loss=8.518427e+00
epoch  19  InfoNCE Loss=7.797376e+00
epoch  20  InfoNCE Loss=6.845540e+00
epoch  21  InfoNCE Loss=6.364517e+00
epoch  22  InfoNCE Loss=6.007553e+00
epoch  23  InfoNCE Loss=5.364059e+00
epoch  24  InfoNCE Loss=5.072688e+00
epoch  25  InfoNCE Loss=4.727694e+00
epoch  26  InfoNCE Loss=4.345561e+00
epoch  27  InfoNCE Loss=4.345973e+00
epoch  28  InfoNCE Loss=4.192435e+00
epoch  29  InfoNCE Loss=3.862695e+00
epoch  30  InfoNCE Loss=3.693741e+00
epoch  31  InfoNCE Loss=3.431449e+00
epoch  32  InfoNCE Loss=3.297399e+00
epoch  33  InfoNCE Loss=3.210030e+00
epoch  34  InfoNCE Loss=3.103582e+00
epoch  35  InfoNCE Loss=3.017114e+00
epoch  36  InfoNCE Loss=2.918854e+00
epoch  37  InfoNCE Loss=2.877443e+00
epoch  38  InfoNCE Loss=2.659061e+00
epoch  39  InfoNCE Loss=2.533886e+00
epoch  40  InfoNCE Loss=2.563447e+00
epoch  41  InfoNCE Loss=2.659132e+00
epoch  42  InfoNCE Loss=2.558560e+00
epoch  43  InfoNCE Loss=2.379937e+00
epoch  44  InfoNCE Loss=2.253961e+00
epoch  45  InfoNCE Loss=2.222408e+00
epoch  46  InfoNCE Loss=2.191612e+00
epoch  47  InfoNCE Loss=2.086171e+00
epoch  48  InfoNCE Loss=2.005339e+00
epoch  49  InfoNCE Loss=2.130688e+00
epoch  50  InfoNCE Loss=2.106575e+00
epoch  51  InfoNCE Loss=2.167215e+00
epoch  52  InfoNCE Loss=2.066806e+00
epoch  53  InfoNCE Loss=1.973072e+00
epoch  54  InfoNCE Loss=2.021375e+00
epoch  55  InfoNCE Loss=1.875989e+00
epoch  56  InfoNCE Loss=1.759964e+00
epoch  57  InfoNCE Loss=1.689500e+00
epoch  58  InfoNCE Loss=1.793526e+00
epoch  59  InfoNCE Loss=1.760648e+00
epoch  60  InfoNCE Loss=1.665396e+00
epoch  61  InfoNCE Loss=1.694377e+00
epoch  62  InfoNCE Loss=1.768146e+00
epoch  63  InfoNCE Loss=1.788597e+00
epoch  64  InfoNCE Loss=1.700304e+00
epoch  65  InfoNCE Loss=1.567877e+00
epoch  66  InfoNCE Loss=1.601820e+00
epoch  67  InfoNCE Loss=1.598762e+00
epoch  68  InfoNCE Loss=1.636402e+00
epoch  69  InfoNCE Loss=1.509413e+00
epoch  70  InfoNCE Loss=1.503706e+00
epoch  71  InfoNCE Loss=1.478477e+00
epoch  72  InfoNCE Loss=1.464739e+00
epoch  73  InfoNCE Loss=1.553243e+00
epoch  74  InfoNCE Loss=1.562930e+00
epoch  75  InfoNCE Loss=1.474332e+00
epoch  76  InfoNCE Loss=1.553053e+00
epoch  77  InfoNCE Loss=1.441843e+00
epoch  78  InfoNCE Loss=1.382352e+00
epoch  79  InfoNCE Loss=1.414395e+00
epoch  80  InfoNCE Loss=1.346091e+00
epoch  81  InfoNCE Loss=1.320579e+00
epoch  82  InfoNCE Loss=1.313196e+00
epoch  83  InfoNCE Loss=1.294529e+00
epoch  84  InfoNCE Loss=1.282881e+00
epoch  85  InfoNCE Loss=1.261563e+00
epoch  86  InfoNCE Loss=1.311054e+00
epoch  87  InfoNCE Loss=1.461601e+00
epoch  88  InfoNCE Loss=1.390493e+00
epoch  89  InfoNCE Loss=1.357940e+00
epoch  90  InfoNCE Loss=1.371579e+00
epoch  91  InfoNCE Loss=1.404586e+00
epoch  92  InfoNCE Loss=1.347185e+00
epoch  93  InfoNCE Loss=1.297647e+00
epoch  94  InfoNCE Loss=1.347407e+00
epoch  95  InfoNCE Loss=1.309112e+00
epoch  96  InfoNCE Loss=1.412326e+00
epoch  97  InfoNCE Loss=1.335113e+00
epoch  98  InfoNCE Loss=1.293803e+00
epoch  99  InfoNCE Loss=1.254258e+00
epoch 100  InfoNCE Loss=1.189403e+00
epoch 101  InfoNCE Loss=1.123768e+00
epoch 102  InfoNCE Loss=1.113201e+00
epoch 103  InfoNCE Loss=1.142600e+00
epoch 104  InfoNCE Loss=1.149827e+00
epoch 105  InfoNCE Loss=1.171083e+00
epoch 106  InfoNCE Loss=1.226317e+00
epoch 107  InfoNCE Loss=1.203037e+00
epoch 108  InfoNCE Loss=1.288717e+00
epoch 109  InfoNCE Loss=1.347793e+00
epoch 110  InfoNCE Loss=1.334257e+00
epoch 111  InfoNCE Loss=1.356059e+00
epoch 112  InfoNCE Loss=1.402359e+00
epoch 113  InfoNCE Loss=1.400993e+00
epoch 114  InfoNCE Loss=1.346598e+00
epoch 115  InfoNCE Loss=1.349657e+00
epoch 116  InfoNCE Loss=1.340045e+00
epoch 117  InfoNCE Loss=1.309458e+00
epoch 118  InfoNCE Loss=1.200693e+00
epoch 119  InfoNCE Loss=1.115700e+00
epoch 120  InfoNCE Loss=1.157657e+00
epoch 121  InfoNCE Loss=1.303731e+00
epoch 122  InfoNCE Loss=1.238872e+00
epoch 123  InfoNCE Loss=1.361579e+00
epoch 124  InfoNCE Loss=1.614747e+00
epoch 125  InfoNCE Loss=1.578040e+00
epoch 126  InfoNCE Loss=1.453784e+00
epoch 127  InfoNCE Loss=1.500896e+00
epoch 128  InfoNCE Loss=1.378796e+00
epoch 129  InfoNCE Loss=1.298946e+00
epoch 130  InfoNCE Loss=1.300020e+00
epoch 131  InfoNCE Loss=1.293798e+00
epoch 132  InfoNCE Loss=1.220657e+00
epoch 133  InfoNCE Loss=1.085376e+00
epoch 134  InfoNCE Loss=1.056782e+00
epoch 135  InfoNCE Loss=1.131042e+00
epoch 136  InfoNCE Loss=1.300359e+00
epoch 137  InfoNCE Loss=1.295994e+00
epoch 138  InfoNCE Loss=1.243289e+00
epoch 139  InfoNCE Loss=1.461291e+00
epoch 140  InfoNCE Loss=1.735562e+00
epoch 141  InfoNCE Loss=1.645922e+00
epoch 142  InfoNCE Loss=1.488206e+00
epoch 143  InfoNCE Loss=1.425113e+00
epoch 144  InfoNCE Loss=1.421218e+00
epoch 145  InfoNCE Loss=1.405977e+00
epoch 146  InfoNCE Loss=1.409767e+00
epoch 147  InfoNCE Loss=1.390181e+00
epoch 148  InfoNCE Loss=1.317850e+00
epoch 149  InfoNCE Loss=1.355163e+00
epoch 150  InfoNCE Loss=1.340399e+00
epoch 151  InfoNCE Loss=1.267845e+00
epoch 152  InfoNCE Loss=1.247308e+00
epoch 153  InfoNCE Loss=1.164428e+00
epoch 154  InfoNCE Loss=1.167507e+00
epoch 155  InfoNCE Loss=1.092585e+00
epoch 156  InfoNCE Loss=1.102355e+00
epoch 157  InfoNCE Loss=1.312329e+00
epoch 158  InfoNCE Loss=1.405939e+00
epoch 159  InfoNCE Loss=1.233657e+00
epoch 160  InfoNCE Loss=1.198030e+00
epoch 161  InfoNCE Loss=1.122067e+00
epoch 162  InfoNCE Loss=1.092604e+00
epoch 163  InfoNCE Loss=1.127278e+00
epoch 164  InfoNCE Loss=1.046503e+00
epoch 165  InfoNCE Loss=1.070124e+00
epoch 166  InfoNCE Loss=1.151578e+00
epoch 167  InfoNCE Loss=1.296609e+00
epoch 168  InfoNCE Loss=1.292086e+00
epoch 169  InfoNCE Loss=1.184891e+00
epoch 170  InfoNCE Loss=1.116649e+00
epoch 171  InfoNCE Loss=1.323178e+00
epoch 172  InfoNCE Loss=1.357535e+00
epoch 173  InfoNCE Loss=1.365304e+00
epoch 174  InfoNCE Loss=1.372661e+00
epoch 175  InfoNCE Loss=1.354576e+00
epoch 176  InfoNCE Loss=1.318494e+00
epoch 177  InfoNCE Loss=1.212367e+00
epoch 178  InfoNCE Loss=1.105180e+00
epoch 179  InfoNCE Loss=1.087908e+00
epoch 180  InfoNCE Loss=1.298404e+00
epoch 181  InfoNCE Loss=1.468211e+00
epoch 182  InfoNCE Loss=1.431433e+00
epoch 183  InfoNCE Loss=1.267486e+00
epoch 184  InfoNCE Loss=1.323758e+00
epoch 185  InfoNCE Loss=1.276569e+00
epoch 186  InfoNCE Loss=1.125942e+00
epoch 187  InfoNCE Loss=1.195265e+00
epoch 188  InfoNCE Loss=1.174698e+00
epoch 189  InfoNCE Loss=1.213473e+00
epoch 190  InfoNCE Loss=1.103778e+00
epoch 191  InfoNCE Loss=1.123047e+00
epoch 192  InfoNCE Loss=1.313378e+00
epoch 193  InfoNCE Loss=1.481514e+00
epoch 194  InfoNCE Loss=1.388043e+00
epoch 195  InfoNCE Loss=1.222108e+00
epoch 196  InfoNCE Loss=1.153185e+00
epoch 197  InfoNCE Loss=1.133230e+00
epoch 198  InfoNCE Loss=1.065016e+00
epoch 199  InfoNCE Loss=1.221287e+00
epoch 200  InfoNCE Loss=1.706401e+00